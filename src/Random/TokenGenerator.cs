using System;
using System.Linq;
using System.Text;

namespace DG.Cryptography.Random
{
    /// <summary>
    /// Allows for cryptographically secure strings to be generated.
    /// </summary>
    public sealed class TokenGenerator
    {
        private const string _alphaNumericCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        private const string _defaultCharacters = _alphaNumericCharacters + @"?!@#$%&*()[]{}-=_+:;";

        private readonly IRandomNumberProvider _randomNumberProvider;
        private readonly char[] _validCharacters;

        /// <summary>
        /// Initializes a new instance of <see cref="TokenGenerator"/> with the given <paramref name="randomNumberProvider"/> and <paramref name="characters"/>.
        /// </summary>
        /// <param name="randomNumberProvider"></param>
        /// <param name="characters"></param>
        public TokenGenerator(IRandomNumberProvider randomNumberProvider, char[] characters)
        {
            _validCharacters = new char[characters.Length];
            Array.Copy(characters, _validCharacters, characters.Length);
            _randomNumberProvider = randomNumberProvider;
        }

        /// <summary>
        /// Generates a cryptographically secure string with the given length.
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public string Generate(int length)
        {
            StringBuilder res = new StringBuilder();
            for (int i = 0; i < length; i++)
            {
                res.Append(_randomNumberProvider.NextPickFrom(_validCharacters));
            }
            return res.ToString();
        }

        /// <summary>
        /// Generates a cryptographically secure string with the given strength in bits of entropy
        /// </summary>
        /// <param name="bitsOfEntropy"></param>
        /// <returns></returns>
        public string GenerateForStrength(int bitsOfEntropy)
        {
            int n = _validCharacters.Distinct().Count();
            int length = (int)Math.Ceiling(bitsOfEntropy / Math.Log(n, 2));
            return Generate(length);
        }

        /// <summary>
        /// Returns the bits of entropy for tokens generated by this instance of <see cref="TokenGenerator"/> with the given <paramref name="length"/>.
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public int GetStrength(int length)
        {
            return GetStrength(_validCharacters, length);
        }

        /// <summary>
        /// Returns the bits of entropy of a token with the given <paramref name="possibleCharacters"/> and <paramref name="length"/>.
        /// </summary>
        /// <param name="possibleCharacters"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        private static int GetStrength(char[] possibleCharacters, int length)
        {
            int n = possibleCharacters.Distinct().Count();
            return (int)Math.Floor(length * (Math.Log(n) / Math.Log(2)));
        }

        /// <summary>
        /// Creates a new instance of the <see cref="TokenGenerator"/> class that allows for secure tokens to be generated, containing a random distribution of pre-determined characters.
        /// </summary>
        /// <returns></returns>
        public static TokenGenerator Default => WithCharacters(_defaultCharacters);

        /// <summary>
        /// Creates a new instance of the <see cref="TokenGenerator"/> class that allows for secure tokens to be generated, containing a random distribution of alpha-numeric characters.
        /// </summary>
        /// <returns></returns>
        public static TokenGenerator AlphaNumeric => WithCharacters(_alphaNumericCharacters);

        /// <summary>
        /// Creates a new instance of the <see cref="TokenGenerator"/> class that allows for secure tokens to be generated, containing a random distribution of characters that would appear in a base64 encoded string.
        /// </summary>
        /// <returns></returns>
        public static TokenGenerator Disguised => WithCharacters(_alphaNumericCharacters + "+/");

        /// <summary>
        /// Creates a new instance of the <see cref="TokenGenerator"/> class that allows for secure tokens to be generated, containing a random distribution of the given <paramref name="characters"/>.
        /// </summary>
        /// <param name="characters"></param>
        /// <returns></returns>
        public static TokenGenerator WithCharacters(string characters)
        {
            return new TokenGenerator(SecureRandomNumberProvider.Default, characters.ToArray());
        }

        /// <summary>
        /// Creates a new instance of the <see cref="TokenGenerator"/> class that allows for secure tokens to be generated, containing a random distribution of the given <paramref name="characters"/>.
        /// </summary>
        /// <param name="characters"></param>
        /// <returns></returns>
        public static TokenGenerator WithCharacters(params char[] characters)
        {
            return new TokenGenerator(SecureRandomNumberProvider.Default, characters);
        }
    }
}
